# -*- coding: utf-8 -*-
"""20221004_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nqHh7RqQENPVYaTlAK6r9lOXWgD7YBUK

#금융 데이터 활용을 위한 package 설치
"""

!pip install -U finance-datareader
!pip install -U pmdarima

import FinanceDataReader as fdr
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pmdarima.arima import ndiffs
import pmdarima as pm


df_krx = fdr.StockListing('KRX') # 한국거래소 상장종목 전체
ticker = df_krx[df_krx.Name=='삼성전자']['Symbol'] # 티커

ss = fdr.DataReader(''.join(ticker.values),'2020-03-01', '2021-01-30')

y_train = ss['Close'][:int(0.7*len(ss))]
y_test = ss['Close'][int(0.7*len(ss)):]
y_train.plot()
y_test.plot()

"""#문제1 : 이동 평균 기법을 사용하여 최적의 데이터를 만드세요. (이때 이동 평균의 날짜에 대한 선정 사유를 적으세요."""

#Your Code(Moving Average) is here
ss.info()

ss.columns

def mov_avg_filter(x_n, x_meas):
    """Calculate average sonar using a moving average filter (batch expression)."""
    n = len(x_n)
    for i in range(n-1):
        x_n[i] = x_n[i+1]
    x_n[n-1] = x_meas
    x_avg = np.mean(x_n)
    return x_avg, x_n

def get_ss(self):
  z = ss['Close'][i]
  return z

n = 10
n_samples = len(ss)
time_end = 10

dt = time_end / n_samples
time = np.arange(0, time_end,dt)
x_meas_save = np.zeros(n_samples)
x_avg_save = np.zeros(n_samples)

for i in range(n_samples):
    x_meas = get_ss(i)
    if i == 0:
        x_avg, x_n = x_meas, x_meas * np.ones(n)
        print(x_meas * np.ones(n))
    else:
        x_avg, x_n = mov_avg_filter(x_n, x_meas)

    x_meas_save[i] = x_meas
    x_avg_save[i] = x_avg

plt.plot(time, x_meas_save, 'r*', label='Measured')
plt.plot(time, x_avg_save, 'b-', label='Moving average')
plt.legend(loc='upper left')
plt.title('Measured Altitudes v.s. Moving Average Filter Values')
plt.xlabel('Time [sec]')
plt.ylabel('Altitude [m]')
plt.savefig('/content/png')

"""#답 1: 이동평균값 평균 날자 선정 사유

이동 평균은 지정된 기간의 평균값을 계산하고 시계열 그래프에 값을 표시한다.
스무싱 효과를 만들며 일별 변동에서 발생하는 노이즈를 줄여준다.

#문제2 : 저주파 필터 기법을 사용하여 최적의 데이터 가공을 하세요.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import io
import pandas as pd

len(ss)

alpha = 0.7
n_samples = 228
time_end = 10

def low_pass_filter(x_meas, x_esti,m_alpha):
    """Calculate average sonar using a low-pass filter."""
    x_esti = m_alpha * x_esti + (1 - alpha) * x_meas
    return x_esti

x_esti = None
x_avg = 0
for i in range(n_samples):
    x_meas = get_ss(i)
    k = i + 1
    x_avg = low_pass_filter(k, x_meas, x_avg)
    if i == 0:
        x_esti = x_meas
    else:
        x_esti = low_pass_filter(x_meas, x_esti, alpha)

    x_meas_save[i] = x_meas
    x_esti_save[i] = x_esti
    x_avg_save[i] = x_avg

plt.plot(time, x_meas_save, 'r*', label='Measured')
plt.plot(time, x_esti_save, 'b-', label='Low-pass Filter')
plt.legend(loc='upper left')
plt.title('Measured Altitudes v.s. LPF Values')
plt.xlabel('Time [sec]')
plt.ylabel('Altitude [m]')
plt.savefig('/png')

"""#답 2:  변수 선정 사유에 대한 근거를 제시하세요

#문제3 : 선형회기를 사용하여 2022.03.01의 값을 예측하세요.
"""

#Your Code(Linear Regression) is here
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np

"""#답 3 :"""