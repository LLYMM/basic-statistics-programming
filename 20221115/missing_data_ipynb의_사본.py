# -*- coding: utf-8 -*-
"""missing data.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IbxCnVZLBGyt4dv3lfYZ43D9mdrlmTIp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

x = [1,  2, 3,  4, 5,  6, 7,  8, 9]
y = [10, 40, 30, 50, 5, 10, 60, 100, 200]

plt.xlabel('X data')
plt.ylabel('Y data')

plt.grid(color = 'green', alpha = 0.5, linestyle = '--')
plt.plot(x, y)

y = [10 , np.nan, 30, 50, 60, 10, 60, 100, 200]
plt.grid(color='green', alpha = 0.5, linestyle = '--')
plt.plot(x, y, marker='o')

#결측치 처리 함수
def missing_data(y1, y2):
  avg_data = (y2+y1)/2
  return avg_data

y[1] = missing_data(y[0], y[2])
plt.grid(color='green', alpha = 0.5, linestyle = '--')
plt.plot(x, y, marker='o')

def map1(x1,y1,x3,y3,x2):

  a= (y3-y1)/(x3-x1)
  b= y1-a*x1
  estimated_data = a * x2 + b
  return estimated_data

y[1] = map1(x[0],y[0],x[2], y[2], x[1])
plt.grid(color='green', alpha = 0.5, linestyle = '--')
plt.plot(x, y, marker='o')

y = [10, 40, 30, 50, 5, 10, 60, 100, 200]
x = [1,  2,3,  4,5,  6,7,  8,9]

#1.3일때 데이터 추정
y[1] = map1(x[0],y[0],x[2], y[2], 1.3)
plt.grid(color='green', alpha = 0.5, linestyle = '--')
plt.plot(x, y, marker='o')

def map_2D(x1, y1, z1, x2, z2, y2, x3, y3, z3, x4, y4, z4, x_input, y_input):
  h1 = (y_input - y1)/(y2-y1)
  h2 = (y2 - y_input)/(y2-y1)
  M = h1 * z2 + h2 + z1
  
  print("h1: " ,h1, "h2: " ,h2, "M: ", M)
  
  h3 = (y_input - y3)/(y4-y3)
  h4 = (y4 - y_input)/(y4-y3)
  N = h4 * z3 + h3 + z4
  
  print("h3: " ,h3, "h4: " ,h4, "N: ", N)

  w1 = (x_input - x1)/(x3-x1)
  w2 = (x3 - x_input)/(x3-x1)
  P = M * w2 + N * w1
  print("w1: ", w1, "w2: ", w2, "P" , P)
  return P

result = map_2D(0, 0, 2, 0,1,4, 1,0,3, 1,1,0, 0,1)
print(result)

X=[0,2,4,6]
Y=[0,2,4,6]
Z=[[1,2,3,4],
   [5,6,7,8],
   [9,10,11,12],
   [13,14,15,16]
   ]

X[1]

Z[3][2]

def find_x_index(X,input_x):
    for i in range(0, len(X)-1):
        if((X[i]<=input_x) & (X[i+1]>input_x)):
            x_min_index = i
            x_max_index = i+1
            print(x_min_index,"~",x_max_index)
            return x_min_index,x_max_index

def find_y_index(Y,input_y):
    for i in range(0, len(Y)-1):
        if((Y[i]<=input_y) & (Y[i+1]>input_y)):
            y_min_index = i
            y_max_index = i+1
            print(y_min_index,"~",y_max_index)
            return y_min_index,y_max_index

input_x = 2.3
input_y = 2.3
xmin_index,xmax_index = find_x_index(X, input_x)
ymin_index,ymax_index = find_y_index(Y, input_y)

input_x=4.3
input_y=2.4

data = map_2D(X[xmin_index], Y[ymin_index], Z[xmin_index][ymin_index], 
       X[xmin_index],Y[ymax_index], Z[xmin_index][ymax_index],
       X[xmax_index],Y[ymin_index], Z[xmax_index][ymin_index],
       X[xmax_index],Y[ymax_index], Z[xmax_index][ymax_index],
       input_x, input_y)
print(data)